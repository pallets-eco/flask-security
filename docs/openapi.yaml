openapi: 3.0.0
info:
  description: |
    Default API for Flask-Security.
    
    __N.B. This is preliminary.__
    
    Since Flask-Security is middleware, with many possible configurations this is a
    guide to how the APIs will behave using standard defaults.
    
    _Be aware that the current renderer is great! but has some limitations._ 
    In particular
    it can't represent both form input and JSON input - but all APIs take both. Also
    it currently doesn't render 'examples' correctly.
    
    You can download the latest spec from: https://github.com/jwag956/flask-security/blob/master/docs/openapi.yaml
  version: 1.0.0
  title: "Flask-Security External API"
  contact:
    name: Flask-Security-Too
    url: https://github.com/jwag956/flask-security
  license:
    name: MIT
    url: https://github.com/jwag956/flask-security/blob/master/LICENSE
paths:
  /login:
    get:
      summary: Retrieve login form
      responses:
        200:
          description: Login form
          content:
            text/html:
              schema:
                example: render_template(cv('LOGIN_USER_TEMPLATE')
    post:
      summary: Login to application
      description: Supports both json and form request types
      parameters:
        - name: next
          in: query
          description: >
              URL to redirect to on successful registration. Ignored for json request.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
          application/x-www-form-urlencoded:
            schema:             
              $ref: "#/components/schemas/Login"
      responses:
        200:
          description: Login response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultJsonResponse"
            text/html:
              schema:
                description: Unsuccessful login
                example: render_template(cv('LOGIN_USER_TEMPLATE') with error values
        302:
          description: >
            Success or failure with form data body.
            redirect('next') or redirect(config_value('POST_LOGIN_VIEW'))
          headers:
            Location:
              description: redirect
              schema:
                type: string
                example: redirect(cv('POST_LOGIN_VIEW'))
        400:
          description: Errors while validating login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultJsonErrorResponse"
  /logout:
    get:
      summary: Log out current user
      responses:
        302:
          description: Successful logout
          headers:
            Location:
              description: redirect(cv('POST_LOGOUT_VIEW'))
              schema:
                example: redirect(cv('POST_LOGOUT_VIEW'))
    post:
      summary: Log out current user
      responses:
        200:
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                required: [meta]
                properties:
                  meta:
                    type: object
                    required: [code]
                    properties:
                      code:
                        type: integer
                        example: 200
                        description: Http status code
  /register:
    get:
      summary: Retrieve register form
      responses:
        200:
          description: Register form
          content:
            text/html:
              schema:
                example: render_template(cv('REGISTER_USER_TEMPLATE')
    post:
      summary: Register with application
      description: Supports both json and form request types
      parameters:
        - name: next
          in: query
          description: >
              URL to redirect to on successful registration. Ignored for json request.
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
          application/x-www-form-urlencoded:
            schema:             
              $ref: "#/components/schemas/RegisterForm"
      responses:
        200:
          description: Register response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultJsonResponse"
            text/html:
              schema:
                description: Unsuccessful registration
                example: render_template(cv('REGISTER_USER_TEMPLATE') with error values
        302:
          description: >
            Successful registration with form data body.
          headers:
            Location:
              description: redirect to cv('next') or cv('POST_REGISTER_VIEW')
              schema:
                type: string
        400:
          description: Errors while validating registration form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultJsonErrorResponse"  
  /reset/{token}:
    parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Request to reset password.
      description: >
        This is the result of getting a reset-password link and is usually
        the result of clicking the link from a reset-password email.
        If cv('REDIRECT_BEHAVIOR') == 'spa' then a 302 is always returned.
      responses:
        200:
          description: Reset password form
          content:
            text/html:
              schema:
                example: render_template(cv('RESET_PASSWORD_TEMPLATE'))
        302:
          description: >
            Redirects depending on success/error and whether 
            cv('REDIRECT_BEHAVIOR') == 'spa'.
          headers:
            Location:
              description: |
                On spa-success: cv('RESET_VIEW')?token={token}&email={email}
                
                On spa-error-expired: cv('RESET_ERROR_VIEW')?error={msg}&email={email}
                
                On spa-error-invalid-token: cv('RESET_ERROR_VIEW')?error={msg}
                
                On default-error: redirect(cv('FORGOT_PASSWORD'))
              schema:
                type: string
              examples:
                spa-success:
                  value: cv('RESET_VIEW')?token={token}&email={email}
                spa-error-expired:
                  value: cv('RESET_ERROR_VIEW')?error={msg}&email={email}
                spa-error-invalid-token:
                  value: cv('RESET_ERROR_VIEW')?error={msg}
                default-error:
                  value: redirect(cv('FORGOT_PASSWORD'))
    post:
      summary: Reset password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPassword"
          application/x-www-form-urlencoded:
            schema:             
              $ref: "#/components/schemas/ResetPassword"
      responses:
        200:
          description: Reset response.
          content:
            text/html:
              schema:
                description: Reset form validation error.
                example: render_template(cv('RESET_PASSWORD_TEMPLATE') with error values
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultJsonResponse"
        302:
          description: Password has been reset or validation error (non-json)
          headers:
            Location:
              description: |
                On success: redirect(cv('POST_RESET_VIEW')) or
                    redirect(cv('POST_LOGIN_VIEW'))
                    
                On invalid/expired token: redirect(cv('FORGOT_PASSWORD'))
              schema:
                type: string
              examples:
                success:
                  value: redirect(cv('POST_RESET_VIEW')) or
                    redirect(cv('POST_LOGIN_VIEW'))
                invalid/expired-token:
                  value: redirect(cv('FORGOT_PASSWORD'))
        400:
          description: Errors while validating form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultJsonErrorResponse" 
          
components:
  schemas:
    Login:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          description: >
            user identifier. This is by default an email address, but can be any (unique)
            field that is part of the User model and is defined in the USER_IDENTITY_ATTRIBUTES configuration variable. It will also match against numeric User model fields.
        password:
          type: string
          description: Password
        remember_me:
          type: boolean
          description: >
            If true, will remember userid as part of cookie. There is a configuration variable DEFAULT_REMEMBER_ME that can be set. This field will override that.
    DefaultJsonResponse:
      type: object
      required: [user]
      properties:
        user:
          type: object
          required: [id]
          description: >
            By default just 'id' and 'authentication_token' are returned. However by overriding _User::get_security_payload()_ any attributes of the User model can be returned.
          properties:
            id:
              type: integer
              example: 42
              description: Unique user id (primary key)
            authentication_token:
              type: string
              description: Token to be used in future token-based API calls.
    DefaultJsonErrorResponse:
      type: object
      required: [meta, response]
      properties:
        meta:
          type: object
          required: [code]
          properties:
            code:
              type: integer
              example: 400
              description: Http status code
        response:
          type: object
          required: [errors]
          properties:
            errors:
              type: object
              description: Errors per input/form field
              properties:
                email:
                  type: array
                  items:
                    type: string
                    example: Email issues.
                    description: Error message (localized)
    Register:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          description: >
            user identifier. This is by default an email address, but can be any (unique)
            field that is part of the User model and is defined in the USER_IDENTITY_ATTRIBUTES configuration variable. It will also match against numeric User model fields.
        password:
          type: string
          description: Password
    RegisterForm:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          description: >
            user identifier. This is by default an email address, but can be any (unique)
            field that is part of the User model and is defined in the USER_IDENTITY_ATTRIBUTES configuration variable. It will also match against numeric User model fields.
        password:
          type: string
          description: Password
        password_confirm:
          type: string
          description: >
            If present, must re-type in password. This will not be present if the SECURITY_CONFIRM configuration is true.
        next:
          type: string
          description: >
            Redirect URL. Overrides POST_REGISTER_VIEW
    ResetPassword:
      type: object
      required: [password, password_confirm]
      properties:
        password:
          type: string
          description: Password
        password_confirm:
          type: string
          description: Password - again

    